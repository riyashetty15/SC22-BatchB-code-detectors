{"backend_state":"running","connection_file":"/projects/0ddeade5-3577-4fe8-8cd6-8a0cb653428e/.local/share/jupyter/runtime/kernel-b2aa4b90-3eaa-4592-ad46-35c67ecc902e.json","kernel":"nlp_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"interpreter":{"hash":"335ee12212264728feb72f243af72c5a8ea26c832f07e1f651ce9e17c7ceae23"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{},"version_major":2,"version_minor":0}}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1656613623924,"exec_count":9,"id":"da690e","input":"# Install NLTK - pip install nltk\n\n\n!pip3 install nltk\nimport nltk\nnltk.download('wordnet')\nnltk.download('punkt')","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"Requirement already satisfied: nltk in /projects/0ddeade5-3577-4fe8-8cd6-8a0cb653428e/.local/lib/python3.8/site-packages (3.7)\r\n"},"1":{"name":"stdout","text":"Requirement already satisfied: joblib in /usr/local/lib/python3.8/dist-packages (from nltk) (1.1.0)\r\nRequirement already satisfied: click in /projects/0ddeade5-3577-4fe8-8cd6-8a0cb653428e/.local/lib/python3.8/site-packages (from nltk) (8.1.3)\r\nRequirement already satisfied: regex>=2021.8.3 in /projects/0ddeade5-3577-4fe8-8cd6-8a0cb653428e/.local/lib/python3.8/site-packages (from nltk) (2022.6.2)\r\nRequirement already satisfied: tqdm in /projects/0ddeade5-3577-4fe8-8cd6-8a0cb653428e/.local/lib/python3.8/site-packages (from nltk) (4.64.0)\r\n"},"2":{"name":"stderr","text":"[nltk_data] Downloading package wordnet to /projects/0ddeade5-3577-4fe\n[nltk_data]     8-8cd6-8a0cb653428e/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package punkt to /projects/0ddeade5-3577-4fe8-\n[nltk_data]     8cd6-8a0cb653428e/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"},"3":{"data":{"text/plain":"True"},"exec_count":9}},"pos":2,"start":1656613621026,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613624129,"exec_count":10,"id":"0f2c71","input":"import urllib\nimport bs4 as bs\nimport re","kernel":"nlp_env","pos":4,"start":1656613623931,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613624972,"exec_count":12,"id":"a61344","input":"text[:100]","kernel":"nlp_env","output":{"0":{"data":{"text/plain":"\" contemporary climate change includes both global warming and its impacts on earth's weather pattern\""},"exec_count":12}},"pos":6,"start":1656613624967,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613625444,"exec_count":13,"id":"2759b3","input":"'''\nYour code here: Tokenize the words from the data and set it to a variable called words.\nHint: how to this might be on the very home page of NLTK!\n'''\nimport urllib\nimport bs4 as bs\nimport re\n\n# We will read the contents of the Wikipedia article \"Global_warming\" as an example, please feel free to use your own! You can use the url below:\nurl = 'https://en.wikipedia.org/wiki/NPL' # you can change this to use other sites as well.\n\n# We can open the page using \"urllib.request.urlopen\" then read it using \".read()\"\nsource = urllib.request.urlopen(url).read()\n\n# Beautiful Soup is a Python library for pulling data out of HTML and XML files.\n# you may need to install a parser library --> \"!pip3 install lxml\"\n# Parsing the data/creating BeautifulSoup object\n\nsoup = bs.BeautifulSoup(source,\"html.parser\")\n\n# Fetching the data\ntext = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    text += paragraph.text\n\n\ntokens = nltk.word_tokenize(text)\nwords = nltk.pos_tag(tokens)\n\nprint(tokens)","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"['NPL', 'can', 'refer', 'to', ':']\n"}},"pos":8,"scrolled":true,"start":1656613624986,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613631192,"exec_count":14,"id":"529530","input":"print(words[:10])","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[('NPL', 'NNP'), ('can', 'MD'), ('refer', 'VB'), ('to', 'TO'), (':', ':')]\n"}},"pos":10,"start":1656613631156,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613631947,"exec_count":15,"id":"47e03a","input":"'''\nYour code here: Tokenize the sentences from the data  and set it to a variable called sentences.\nHint: try googling how to tokenize sentences in NLTK!\n'''\nimport urllib\nimport bs4 as bs\nimport re\n\n# We will read the contents of the Wikipedia article \"Global_warming\" as an example, please feel free to use your own! You can use the url below:\nurl = 'https://en.wikipedia.org/wiki/Water' # you can change this to use other sites as well.\n\n# We can open the page using \"urllib.request.urlopen\" then read it using \".read()\"\nsource = urllib.request.urlopen(url).read()\n\n# Beautiful Soup is a Python library for pulling data out of HTML and XML files.\n# you may need to install a parser library --> \"!pip3 install lxml\"\n# Parsing the data/creating BeautifulSoup object\n\nsoup = bs.BeautifulSoup(source,\"html.parser\")\n\n# Fetching the data\ntext = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    text += paragraph.text\n\nfrom nltk.tokenize import sent_tokenize\nsentences = sent_tokenize(text)\nprint(sentences[:10])","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[\"\\nWater (chemical formula H2O) is an inorganic, transparent, tasteless, odorless, and nearly colorless chemical substance, which is the main constituent of Earth's hydrosphere and the fluids of all known living organisms (in which it acts as a solvent[1]).\", 'It is vital for all known forms of life, even though it provides neither food, energy, nor organic micronutrients.', 'Its chemical formula, H2O, indicates that each of its molecules contains one oxygen and two hydrogen atoms, connected by covalent bonds.', 'The hydrogen atoms are attached to the oxygen atom at an angle of 104.45°.', '[2] \"Water\" is also the name of the liquid state of H2O at standard temperature and pressure.', 'A number of natural states of water exist.', 'It forms precipitation in the form of rain and aerosols in the form of fog.', 'Clouds consist of suspended droplets of water and ice, its solid state.', 'When finely divided, crystalline ice may precipitate in the form of snow.', 'The gaseous state of water is steam or water vapor.']\n"}},"pos":14,"start":1656613631219,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613631958,"exec_count":16,"id":"de8d66","input":"print(sentences[:10])","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[\"\\nWater (chemical formula H2O) is an inorganic, transparent, tasteless, odorless, and nearly colorless chemical substance, which is the main constituent of Earth's hydrosphere and the fluids of all known living organisms (in which it acts as a solvent[1]).\", 'It is vital for all known forms of life, even though it provides neither food, energy, nor organic micronutrients.', 'Its chemical formula, H2O, indicates that each of its molecules contains one oxygen and two hydrogen atoms, connected by covalent bonds.', 'The hydrogen atoms are attached to the oxygen atom at an angle of 104.45°.', '[2] \"Water\" is also the name of the liquid state of H2O at standard temperature and pressure.', 'A number of natural states of water exist.', 'It forms precipitation in the form of rain and aerosols in the form of fog.', 'Clouds consist of suspended droplets of water and ice, its solid state.', 'When finely divided, crystalline ice may precipitate in the form of snow.', 'The gaseous state of water is steam or water vapor.']\n"}},"pos":15,"start":1656613631954,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613631974,"exec_count":17,"id":"9c3b25","input":"nltk.download('stopwords')\nfrom nltk.corpus import stopwords","kernel":"nlp_env","output":{"0":{"name":"stderr","text":"[nltk_data] Downloading package stopwords to /projects/0ddeade5-3577-4\n[nltk_data]     fe8-8cd6-8a0cb653428e/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n"}},"pos":17,"start":1656613631964,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613636076,"exec_count":18,"id":"c9911b","input":"'''\ndefine a function called \"remove_stopwords\" that takes in a list of the sentences of the text and returns one that doesn't have any stopwords.\n'''\ndef remove_stopwords(sentences):\n    ### Some code goes here. Hint: You may have to look up how to remove stopwords in NLTK if you get stuck. ###\n    for i in range(len(sentences)):\n        word_tokens = nltk.word_tokenize(sentences[i])\n        word_tokens = [w for w in word_tokens if w not in stopwords.words('english')]\n        sentences[i] = ' '.join(word_tokens)\n        ### Some code goes here. Hint: You may have to look up how to removen stopwordword_tokens in NLTK if you get stuck. ###return sentences\n    return sentences\n###Then actually apply your function###\nsentences = remove_stopwords(sentences)\n# print(word_tokens)\nprint(sentences[:10]) #Check if it worked correctly. Are all stopwords removed?","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[\"Water ( chemical formula H2O ) inorganic , transparent , tasteless , odorless , nearly colorless chemical substance , main constituent Earth 's hydrosphere fluids known living organisms ( acts solvent [ 1 ] ) .\", 'It vital known forms life , even though provides neither food , energy , organic micronutrients .', 'Its chemical formula , H2O , indicates molecules contains one oxygen two hydrogen atoms , connected covalent bonds .', 'The hydrogen atoms attached oxygen atom angle 104.45° .', \"[ 2 ] `` Water '' also name liquid state H2O standard temperature pressure .\", 'A number natural states water exist .', 'It forms precipitation form rain aerosols form fog .', 'Clouds consist suspended droplets water ice , solid state .', 'When finely divided , crystalline ice may precipitate form snow .', 'The gaseous state water steam water vapor .']\n"}},"pos":18,"scrolled":true,"start":1656613634280,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613636209,"exec_count":19,"id":"945e3a","input":"'''\ndefine a function called \"remove_punctuation\" that removes punctuation from the sentences.\n'''\ndef remove_punctuation(sentences):\n    punc = \". ? / '' , : ; \"\" ( ) { } [ ] ! @ # $ % ^ & * \\ | = + - _ ` ~ < >\".split()\n    ### Some code goes here. Hint: Try looking up how to remove stopwords in NLTK if you get stuck. ###\n    for i in range(len(sentences)):\n#         nltk.download(\"punkt\")\n        words = nltk.word_tokenize(sentences[i])\n        new_words = [word for word in words if word not in punc]\n        sentences[i] = ' '.join(new_words)\n#         sentences = new_words\n    return sentences\nsentences = remove_punctuation(sentences)\nprint(sentences[:10]) #eliminating all punctuation.","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[\"Water chemical formula H2O inorganic transparent tasteless odorless nearly colorless chemical substance main constituent Earth 's hydrosphere fluids known living organisms acts solvent 1\", 'It vital known forms life even though provides neither food energy organic micronutrients', 'Its chemical formula H2O indicates molecules contains one oxygen two hydrogen atoms connected covalent bonds', 'The hydrogen atoms attached oxygen atom angle 104.45°', '2 `` Water `` also name liquid state H2O standard temperature pressure', 'A number natural states water exist', 'It forms precipitation form rain aerosols form fog', 'Clouds consist suspended droplets water ice solid state', 'When finely divided crystalline ice may precipitate form snow', 'The gaseous state water steam water vapor']\n"}},"pos":19,"start":1656613636088,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613636219,"exec_count":20,"id":"cc5944","input":"from nltk.stem import PorterStemmer\n\nstemmer = PorterStemmer()\n\ndef stem(words):\n    for i in words:\n        print(stemmer.stem(i))\n\n# try each of the words below\n#stemmer.stem('troubled')\n#stemmer.stem('trouble')\n#stemmer.stem('troubling')\n#stemmer.stem('troubles')","kernel":"nlp_env","pos":21,"start":1656613636217,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613640103,"exec_count":21,"id":"c72ddd","input":"'''\nYour code here:\nDefine a function called \"stem_sentences\" that takes in a list of sentences and returns a list of stemmed sentences.\n'''\nnew_senteces = []\ndef stem_sentences(sentences):\n    for i in range(len(sentences)):\n        word_tokens = nltk.word_tokenize(sentences[i])\n        word_token = [stemmer.stem(w) for w in word_tokens]\n        sentences[i] = \" \".join(word_token)\n        return sentences\n        ### Some code goes here. Hint: Try looking up how to stem words in NLTK if you get stuck (or simply use the example above and run stemmer in a loop!). ###\nstemmed_sentences = stem_sentences(sentences)","kernel":"nlp_env","pos":22,"start":1656613640084,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613641658,"exec_count":22,"id":"b0aa9b","input":"\nprint(stemmed_sentences[:10])","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[\"water chemic formula h2o inorgan transpar tasteless odorless nearli colorless chemic substanc main constitu earth 's hydrospher fluid known live organ act solvent 1\", 'It vital known forms life even though provides neither food energy organic micronutrients', 'Its chemical formula H2O indicates molecules contains one oxygen two hydrogen atoms connected covalent bonds', 'The hydrogen atoms attached oxygen atom angle 104.45°', '2 `` Water `` also name liquid state H2O standard temperature pressure', 'A number natural states water exist', 'It forms precipitation form rain aerosols form fog', 'Clouds consist suspended droplets water ice solid state', 'When finely divided crystalline ice may precipitate form snow', 'The gaseous state water steam water vapor']\n"}},"pos":23,"start":1656613641656,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613646857,"exec_count":23,"id":"8a0772","input":"from nltk.stem import WordNetLemmatizer\n\n## Step 1: Import the lemmatizer\nlemmatizer = WordNetLemmatizer()\n'''\nYour code here: Define a function called \"lem_sentences\" that: loops through the sentences, split the sentences up by words and applies \"lemmatizer.lemmatize\" to each word and then join everything back into a sentence\n'''\n##Similar to stopwords: For loop through the sentences, split by words and apply \"lemmatizer.lemmatize\" to each word and join back into a sentence\ndef lem_sentences(sentences):\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        new_words = [lemmatizer.lemmatize(w) for w in words]\n        sentences[i] = \" \".join(new_words)\n    return sentences\nsentences = lem_sentences(sentences)\nprint(sentences[:10])","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[\"water chemic formula h2o inorgan transpar tasteless odorless nearli colorless chemic substanc main constitu earth 's hydrospher fluid known live organ act solvent 1\", 'It vital known form life even though provides neither food energy organic micronutrient', 'Its chemical formula H2O indicates molecule contains one oxygen two hydrogen atom connected covalent bond', 'The hydrogen atom attached oxygen atom angle 104.45°', '2 `` Water `` also name liquid state H2O standard temperature pressure', 'A number natural state water exist', 'It form precipitation form rain aerosol form fog', 'Clouds consist suspended droplet water ice solid state', 'When finely divided crystalline ice may precipitate form snow', 'The gaseous state water steam water vapor']\n"}},"pos":25,"start":1656613644266,"state":"done","type":"cell"}
{"cell_type":"code","end":1656613833472,"exec_count":24,"id":"f7c5aa","input":"nltk.download('averaged_perceptron_tagger')","kernel":"nlp_env","output":{"0":{"name":"stderr","text":"[nltk_data] Downloading package averaged_perceptron_tagger to /project\n[nltk_data]     s/0ddeade5-3577-4fe8-8cd6-8a0cb653428e/nltk_data...\n[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n[nltk_data]       date!\n"},"1":{"data":{"text/plain":"True"},"exec_count":24}},"pos":28,"start":1656613833436,"state":"done","type":"cell"}
{"cell_type":"code","end":1656614014752,"exec_count":29,"id":"2b81f8","input":"# POS Tagging example\n# CC - coordinating conjunction\n# NN - noun, singular (cat, tree)\nall_words = nltk.word_tokenize(text)  ###If we want to look at part of speech taking before we stem/lem\n\ntagged_words = nltk.pos_tag(all_words)\n##Creates a list of lists where each element of the list is [word,partofspeech abbreviation]\n\n# Tagged word paragraph\nword_tags = []\nfor tw in tagged_words:\n    word_tags.append(tw[0]+\"_\"+tw[1])\n\ntagged_paragraph = ' '.join(word_tags)\n\n'''\nYour code here: print the first 1000 characters of tagged_paragraph.\n'''\nprint(tagged_paragraph[:1001]) #it doesn't count the last number so it would go to 1001 to get the first 1000 #ok","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"Water_NNP (_( chemical_JJ formula_NN H2O_NNP )_) is_VBZ an_DT inorganic_JJ ,_, transparent_JJ ,_, tasteless_JJ ,_, odorless_JJ ,_, and_CC nearly_RB colorless_JJ chemical_JJ substance_NN ,_, which_WDT is_VBZ the_DT main_JJ constituent_NN of_IN Earth_NNP 's_POS hydrosphere_NN and_CC the_DT fluids_NNS of_IN all_DT known_VBN living_NN organisms_NNS (_( in_IN which_WDT it_PRP acts_VBZ as_IN a_DT solvent_JJ [_NN 1_CD ]_NN )_) ._. It_PRP is_VBZ vital_JJ for_IN all_DT known_VBN forms_NNS of_IN life_NN ,_, even_RB though_IN it_PRP provides_VBZ neither_CC food_NN ,_, energy_NN ,_, nor_CC organic_JJ micronutrients_NNS ._. Its_PRP$ chemical_JJ formula_NN ,_, H2O_NNP ,_, indicates_VBZ that_IN each_DT of_IN its_PRP$ molecules_NNS contains_VBZ one_CD oxygen_NN and_CC two_CD hydrogen_NN atoms_NNS ,_, connected_VBN by_IN covalent_JJ bonds_NNS ._. The_DT hydrogen_NN atoms_NNS are_VBP attached_VBN to_TO the_DT oxygen_NN atom_NN at_IN an_DT angle_NN of_IN 104.45°_CD ._. [_VB 2_CD ]_NNP ``_`` Water_NNP ''_'\n"}},"pos":29,"start":1656614013538,"state":"done","type":"cell"}
{"cell_type":"code","end":1656614019120,"exec_count":30,"id":"95b896","input":"# Install gensim - pip install gensim\nimport nltk\nfrom gensim.models import Word2Vec\nimport matplotlib.pyplot as plt\nnltk.download('punkt')\nfrom wordcloud import WordCloud","kernel":"nlp_env","output":{"0":{"name":"stderr","text":"[nltk_data] Downloading package punkt to /projects/0ddeade5-3577-4fe8-\n[nltk_data]     8cd6-8a0cb653428e/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"}},"pos":31,"start":1656614017838,"state":"done","type":"cell"}
{"cell_type":"code","end":1656614577307,"exec_count":31,"id":"1cc035","input":"# We will read the contents of the Wikipedia article \"Global_warming\" as an example, please feel free to use your own! You can use the url below:\nurl = 'https://en.wikipedia.org/wiki/Global_warming' # you can change this to use other sites as well.\n\n# We can open the page using \"urllib.request.urlopen\" then read it using \".read()\"\nsource = urllib.request.urlopen(url).read()\n\n# Beautiful Soup is a Python library for pulling data out of HTML and XML files.\n# you may need to install a parser library --> \"!pip3 install lxml\"\n# Parsing the data/creating BeautifulSoup object\n\nsoup = bs.BeautifulSoup(source,\"html.parser\") \n\n# Fetching the data\ntext = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    text += paragraph.text\n\n# Preprocessing the data\n\ntext = re.sub(r'\\[[0-9]*\\]',' ',text) # [0-9]* --> Matches zero or more repetitions of any digit from 0 to 9\ntext = text.lower() #everything to lowercase\ntext = re.sub(r'\\W^.?!',' ',text) # \\W --> Matches any character which is not a word character except (.?!)\ntext = re.sub(r'\\d',' ',text) # \\d --> Matches any decimal digit\ntext = re.sub(r'\\s+',' ',text) # \\s --> Matches any characters that are considered whitespace (Ex: [\\t\\n\\r\\f\\v].)","kernel":"nlp_env","pos":5,"start":1656614576532,"state":"done","type":"cell"}
{"cell_type":"code","end":1656614832761,"exec_count":37,"id":"33404c","input":"#Let's go ahead and create a list that's formatted how word2vec needs:\n# a list of lists where the \"i\"th entry in the list is the word tokenizaiton of the \"i\"th sentence (after preprocessing)\n\nsent = nltk.sent_tokenize(text)\nsent = remove_punctuation(sent)\nsent = remove_stopwords(sent)\nfor i in range(len(sent)):\n    sent[i] = [t for t in nltk.word_tokenize(sent[i])]","kernel":"nlp_env","pos":32,"start":1656614831267,"state":"done","type":"cell"}
{"cell_type":"code","end":1656619593942,"exec_count":43,"id":"514234","input":"# print the tokenized list of lists\nsent[:10]","kernel":"nlp_env","output":{"0":{"data":{"text/plain":"[['contemporary',\n  'climate',\n  'change',\n  'includes',\n  'global',\n  'warming',\n  'impacts',\n  'earth',\n  \"'s\",\n  'weather',\n  'patterns'],\n ['previous',\n  'periods',\n  'climate',\n  'change',\n  'current',\n  'changes',\n  'distinctly',\n  'rapid',\n  'due',\n  'natural',\n  'causes'],\n ['instead',\n  'caused',\n  'emission',\n  'greenhouse',\n  'gases',\n  'mostly',\n  'carbon',\n  'dioxide',\n  'co',\n  'methane'],\n ['burning', 'fossil', 'fuels', 'energy', 'use', 'creates', 'emissions'],\n ['certain',\n  'agricultural',\n  'practices',\n  'industrial',\n  'processes',\n  'forest',\n  'loss',\n  'additional',\n  'sources'],\n ['greenhouse',\n  'gases',\n  'transparent',\n  'sunlight',\n  'allowing',\n  'heat',\n  'earth',\n  \"'s\",\n  'surface'],\n ['earth',\n  'emits',\n  'heat',\n  'infrared',\n  'radiation',\n  'gases',\n  'absorb',\n  'trapping',\n  'heat',\n  'near',\n  'earth',\n  \"'s\",\n  'surface'],\n ['planet',\n  'heats',\n  'causes',\n  'changes',\n  'like',\n  'loss',\n  'sunlight-reflecting',\n  'snow',\n  'cover',\n  'amplifying',\n  'global',\n  'warming'],\n ['due',\n  'climate',\n  'change',\n  'deserts',\n  'expanding',\n  'heat',\n  'waves',\n  'wildfires',\n  'becoming',\n  'common'],\n ['increased',\n  'warming',\n  'arctic',\n  'contributed',\n  'melting',\n  'permafrost',\n  'glacial',\n  'retreat',\n  'sea',\n  'ice',\n  'loss']]"},"exec_count":43}},"pos":33,"start":1656619593923,"state":"done","type":"cell"}
{"cell_type":"code","end":1656619601130,"exec_count":44,"id":"39a244","input":"''' Training the Word2Vec model. You should pass:\n1. a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence\n2. min_count=1 --> Ignores all words with total frequency lower than 1 (i.e., include everything).\n'''\n# create the model\nmodel = Word2Vec(sent, min_count=1)\n# get the most common words of the model (it's entire vocabulary)\nmost_common_words =  model.wv.index_to_key\n# save the model to use it later\nmodel.save(\"word2vec.model\")\n# model = Word2Vec.load(\"word2vec.model\")","kernel":"nlp_env","pos":35,"start":1656619600973,"state":"done","type":"cell"}
{"cell_type":"code","end":1656619621010,"exec_count":46,"id":"3aaa64","input":"#print the first 10 most common words.\n\nprint(most_common_words[:10])","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"['climate', 'change', 'warming', 'emissions', 'global', 'co', 'energy', 'carbon', 'greenhouse', '°c']\n"}},"pos":36,"start":1656619621005,"state":"done","type":"cell"}
{"cell_type":"code","end":1656619695060,"exec_count":47,"id":"7cff0a","input":"similar = model.wv.most_similar('climate')\nprint(similar)","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[('system', 0.3913601338863373), ('coral', 0.38536909222602844), ('gases', 0.35050633549690247), ('significant', 0.33979934453964233), ('``', 0.3367622494697571), ('nations', 0.3219573199748993), ('causes', 0.3188934028148651), ('also', 0.3024670481681824), ('carbon', 0.2935003638267517), ('causing', 0.28829899430274963)]\n"}},"pos":38,"start":1656619695039,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620140786,"exec_count":48,"id":"eb815b","input":"    # Finding Word Vectors - print word vectors for certain words in your text\nword_vec = model.wv['climate']\nprint(word_vec)","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[-0.00314612  0.00404665  0.00509241  0.00928995 -0.00900911 -0.0138689\n  0.0076536   0.0167589  -0.00698014 -0.00488331  0.00554527 -0.00645256\n -0.00560358  0.00826204 -0.0034516  -0.00437994  0.00349112 -0.0030109\n -0.00940492 -0.01610258  0.00901277  0.00702261  0.00889597 -0.00173891\n  0.00557423 -0.00378565 -0.00361251  0.00365716 -0.01000858 -0.00320483\n -0.00294772  0.00014136  0.0100459  -0.00898555 -0.0038411   0.00203079\n  0.00925643 -0.0087911  -0.00170461 -0.00976204 -0.01046149  0.00088515\n -0.00975406 -0.00369826  0.00315434 -0.00112797 -0.0108799   0.0094914\n  0.00659213  0.01036669 -0.0069658   0.00065172 -0.00649215  0.00064724\n  0.00566956 -0.00125367  0.00873568 -0.00646224 -0.00675302  0.01013707\n -0.00089155  0.00052069 -0.00484216 -0.00653242 -0.00530052  0.00666831\n -0.00120562  0.00810757 -0.00755596  0.00670947  0.00208056  0.00986107\n  0.00270503 -0.0105209   0.00716663  0.00266719  0.0082632  -0.00165334\n -0.00564285 -0.00739624 -0.00133163  0.00345656  0.00320672  0.01144772\n -0.00445891  0.00333702  0.00651426 -0.00054066  0.00025389  0.00885297\n  0.00625661  0.00213984  0.0032762   0.00044232  0.01411125  0.00842605\n -0.0070702  -0.01129884  0.0015186   0.00630485]\n"}},"pos":40,"start":1656620140728,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620342147,"exec_count":53,"id":"85b6f2","input":"similar2 = model.wv.most_similar('warming')\nprint(similar2)","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[('however', 0.4291105568408966), ('bushfires', 0.3381921648979187), ('natural', 0.3162209093570709), ('also', 0.30667051672935486), ('greenhouse', 0.3042752742767334), ('oxide', 0.29516249895095825), ('fluorinated', 0.2866035997867584), ('energy', 0.2865983843803406), ('nitrous', 0.28068965673446655), ('directly', 0.2772764265537262)]\n"}},"pos":42,"start":1656620342082,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620394671,"exec_count":55,"id":"362af9","input":"print(similar1, similar2)","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[('system', 0.3913601338863373), ('coral', 0.38536909222602844), ('gases', 0.35050633549690247), ('significant', 0.33979934453964233), ('``', 0.3367622494697571), ('nations', 0.3219573199748993), ('causes', 0.3188934028148651), ('also', 0.3024670481681824), ('carbon', 0.2935003638267517), ('causing', 0.28829899430274963)] [('however', 0.4291105568408966), ('bushfires', 0.3381921648979187), ('natural', 0.3162209093570709), ('also', 0.30667051672935486), ('greenhouse', 0.3042752742767334), ('oxide', 0.29516249895095825), ('fluorinated', 0.2866035997867584), ('energy', 0.2865983843803406), ('nitrous', 0.28068965673446655), ('directly', 0.2772764265537262)]\n"}},"pos":43,"start":1656620394623,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620408422,"exec_count":56,"id":"1d854f","input":"# code to print a wordcloud for your sentences\nwordcloud = WordCloud(\n                        background_color='white',\n                        max_words=100,\n                        max_font_size=50,\n                        random_state=42\n                        ).generate(str(sentences))\nfig = plt.figure(1)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","kernel":"nlp_env","output":{"0":{"data":{"text/plain":"<Figure size 432x288 with 0 Axes>"}},"1":{"data":{"image/png":"c37fb5139ed57dd7baa0fbf008b06d82162f6a2e","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":44,"start":1656620407815,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620446148,"exec_count":57,"id":"aff4e0","input":"# reFetching the data\nlame_text = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    lame_text += paragraph.text","kernel":"nlp_env","pos":46,"start":1656620446117,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620512026,"exec_count":59,"id":"364cf7","input":"'''\nDoing the same without removing stop words or lemming\n'''\n\nsent = nltk.sent_tokenize(text)\nsent = remove_punctuation(sent)\nfor i in range(len(sent)):\n    sent[i] = [t for t in nltk.word_tokenize(sent[i])]\n# tokenize the text using sent_tokenize\n\n# from this list of sentences, create a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence (after preprocessing)","kernel":"nlp_env","pos":47,"start":1656620511742,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620516296,"exec_count":61,"id":"e6a8b8","input":"# Training the Word2Vec model (same code as before), but one change: use our lame data that was not preprocessed\n\n# Try printing this after training the model.\nwords = model.wv.index_to_key\nprint(words[:10])","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"['climate', 'change', 'warming', 'emissions', 'global', 'co', 'energy', 'carbon', 'greenhouse', '°c']\n"}},"pos":49,"start":1656620516286,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620791752,"exec_count":64,"id":"e27cfb","input":"# Finding a vector of a word, but badly\nword_vec_bad = model.wv['like']\nprint(word_vec)","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[-0.00314612  0.00404665  0.00509241  0.00928995 -0.00900911 -0.0138689\n  0.0076536   0.0167589  -0.00698014 -0.00488331  0.00554527 -0.00645256\n -0.00560358  0.00826204 -0.0034516  -0.00437994  0.00349112 -0.0030109\n -0.00940492 -0.01610258  0.00901277  0.00702261  0.00889597 -0.00173891\n  0.00557423 -0.00378565 -0.00361251  0.00365716 -0.01000858 -0.00320483\n -0.00294772  0.00014136  0.0100459  -0.00898555 -0.0038411   0.00203079\n  0.00925643 -0.0087911  -0.00170461 -0.00976204 -0.01046149  0.00088515\n -0.00975406 -0.00369826  0.00315434 -0.00112797 -0.0108799   0.0094914\n  0.00659213  0.01036669 -0.0069658   0.00065172 -0.00649215  0.00064724\n  0.00566956 -0.00125367  0.00873568 -0.00646224 -0.00675302  0.01013707\n -0.00089155  0.00052069 -0.00484216 -0.00653242 -0.00530052  0.00666831\n -0.00120562  0.00810757 -0.00755596  0.00670947  0.00208056  0.00986107\n  0.00270503 -0.0105209   0.00716663  0.00266719  0.0082632  -0.00165334\n -0.00564285 -0.00739624 -0.00133163  0.00345656  0.00320672  0.01144772\n -0.00445891  0.00333702  0.00651426 -0.00054066  0.00025389  0.00885297\n  0.00625661  0.00213984  0.0032762   0.00044232  0.01411125  0.00842605\n -0.0070702  -0.01129884  0.0015186   0.00630485]\n"}},"pos":50,"start":1656620791706,"state":"done","type":"cell"}
{"cell_type":"code","end":1656620795474,"exec_count":65,"id":"087217","input":"### Finding the most similar words in the model but... you get the idea ###\nsimilar3 = model.wv.most_similar('water')\nprint(similar3)\n","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[('also', 0.3867824077606201), ('aluminum', 0.35260501503944397), ('first', 0.32835787534713745), ('venice', 0.3189799189567566), ('sulfate', 0.3159080743789673), ('sixth', 0.3064368963241577), ('divestment', 0.2925642132759094), ('restoration', 0.28978389501571655), ('absorption', 0.2866246700286865), ('dissolves', 0.2858121395111084)]\n"}},"pos":51,"start":1656620795453,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"45397f","input":"","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"62e729","input":"# Look up the most similar words to certain words in your text using the model.wv.most_similar() function","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"719730","input":"### Finding the most similar words in the model ###\n#like this?\nsimilar1 = model.wv.most_similar('climate')\nprint(similar1)","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"[('system', 0.3913601338863373), ('coral', 0.38536909222602844), ('gases', 0.35050633549690247), ('significant', 0.33979934453964233), ('``', 0.3367622494697571), ('nations', 0.3219573199748993), ('causes', 0.3188934028148651), ('also', 0.3024670481681824), ('carbon', 0.2935003638267517), ('causing', 0.28829899430274963)]\n"}},"pos":41,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":62,"id":"3ec299","input":"# Redo the word cloud but set stopwords to empty so it looks really bad\nwordcloud = WordCloud(\n                        background_color='white',\n                        max_words=100,\n                        max_font_size=50,\n                        random_state=42, ###SET STOPWORDS = [] and/or include_numbers = True or you will get the same thing!!!\n                        stopwords = [],\n                        include_numbers = True).generate(str(sentences))\nfig = plt.figure(1)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","kernel":"nlp_env","output":{"0":{"data":{"text/plain":"<Figure size 432x288 with 0 Axes>"}},"1":{"data":{"image/png":"c9b563b52c8ddc42747e784501150e0340e1ca92","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":48,"state":"done","type":"cell"}
{"cell_type":"code","id":"07f30d","input":"","pos":9,"type":"cell"}
{"cell_type":"code","id":"1db40e","input":"","pos":13,"type":"cell"}
{"cell_type":"code","id":"479930","input":"","pos":26,"type":"cell"}
{"cell_type":"code","id":"54818b","input":"","pos":12,"type":"cell"}
{"cell_type":"code","id":"a5734a","input":"","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"01375a","input":"## NLP Part 2 - Stopwords and Punctuation\nNow we are going to work to remove stopwords and punctuation from our data. Why do you think we are going to do this? Do some research if you don't know yet. ","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"1b8346","input":"## NLP Part 1 - Tokenization of paragraphs/sentences\n\nIn this section we are going to tokenize our sentences and words. If you aren't familiar with tokenization, we recommend looking up \"what is tokenization\". \n\nYou should also spend time on the [NLTK documentation](https://www.nltk.org/). If you're not sure how to do something, or get an error, it is best to google it first and ask questions as you go!\n\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"1be9bb","input":"## Testing our model\n\n","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"403411","input":"## NLP Part 3a - Stemming the words\nStemming is the process of reducing inflected (or sometimes derived) words to their word stem, base or root form. There is an example below!","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"5f9760","input":"## NLP Part 4 - POS Tagging\nParts of speech tagging is marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"626e4e","input":"# Word2Vec Model Visualization","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"82c84c","input":"### Why did we do all this work?","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"885ba3","input":"## NLP Part 3b - Lemmatization\n\nLemmatization considers the context and converts the word to its meaningful base form. There is a cool tutorial and definition of lemmatization in NLTK [here](https://www.geeksforgeeks.org/python-lemmatization-with-nltk/).\n\n","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"a67a43","input":"","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"aa18e4","input":"# Natural Language Processing using NLTK\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"b16351","input":"## Training the Word2Vec model\n\nFor this part you may want to follow a guide [here](https://radimrehurek.com/gensim/models/word2vec.html). \n\n","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"bf6c7a","input":"","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"e5fcd5","input":"## NLP Part 0 - Get some Data!\n\nThis section's code is mostly given to you as a review for how you can scrape and manipulate data from the web. ","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"f21802","input":"## Reflection\nHow important do you think proper preprocessing in NLP is?","pos":53,"type":"cell"}
{"id":0,"time":1656619452315,"type":"user"}
{"last_load":1656611342937,"type":"file"}