{"backend_state":"init","connection_file":"/projects/0ddeade5-3577-4fe8-8cd6-8a0cb653428e/.local/share/jupyter/runtime/kernel-95cfabac-11b2-43cb-8a60-42c42777ba85.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":["acolMI3gVF8w","EL8bZ5XLVF8z"],"name":"FlashKarate!.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"11336d","input":"# print the values of a dictionary\nprint(my_dictionary.values())","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vetkiJW3ea8T","outputId":"88eeccc4-5786-46d4-db6b-335a4347247c"},"output":{"0":{"name":"stdout","output_type":"stream","text":"dict_values(['a domesticated carnivorous mammal that typically has a long snout', 'a small domesticated carnivorous mammal with soft fur', 'a rabbit, especially a young one.', 'wolves of a large variety found mainly in northern North America, with gray brindled fur.'])\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3474a0","input":"","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3f0c20","input":"# create a dictionary with key value pairs. I'm just going to use some words and defintions \nmy_dictionary = {\"dog\": \"a domesticated carnivorous mammal that typically has a long snout\",\n                 \"cat\": \"a small domesticated carnivorous mammal with soft fur\",\n                 \"bunny\": \"a rabbit, especially a young one.\",\n                 \"timberwolves\": \"wolves of a large variety found mainly in northern North America, with gray brindled fur.\"\n                 }","metadata":{"id":"3x-2-EJ4Xi7t"},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3f3fa1","input":"print('{1} and {0}'.format('spam', 'eggs'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zM8v0k_Wf0hr","outputId":"9b19dcfe-f873-4947-8b8a-8caaf0ff9187"},"output":{"0":{"name":"stdout","output_type":"stream","text":"eggs and spam\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"41ead3","input":"#access all of the keys and store as a list\nanimals = list(my_dictionary.keys())\nprint(animals)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OZPVqiR8Yzxk","outputId":"4bcfef45-cc37-409b-c87d-76d12e805c8a"},"output":{"0":{"name":"stdout","output_type":"stream","text":"['dog', 'cat', 'bunny', 'timberwolves']\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"61b6ac","input":"","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7e07a5","input":"# Basic usage of the str.format() method looks like this:\nprint('We are the {} who say \"{}!\"'.format('knights', 'Ni'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nj56EG_0fpHN","outputId":"cbfdf989-708e-4b36-b5f3-8f7760e47c76"},"output":{"0":{"name":"stdout","output_type":"stream","text":"We are the knights who say \"Ni!\"\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7e7f3e","input":"# access the value from a dictionary key\nprint(\"a dog is...\", my_dictionary[\"dog\"])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dzYfo-ciVF8r","outputId":"ffd2aefa-ce80-465b-c86e-eeb4dce7fcd3"},"output":{"0":{"name":"stdout","output_type":"stream","text":"a dog is... a domesticated carnivorous mammal that typically has a long snout\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"82a08e","input":"# If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument.\nprint('This {food} is {adjective}.'.format(food='spam', adjective='absolutely horrible'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WTuHIy5Wf6gg","outputId":"33dc1f68-d3d1-41db-8abb-82fe710cec58"},"output":{"0":{"name":"stdout","output_type":"stream","text":"This spam is absolutely horrible.\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"85cdb2","input":"# A number in the brackets can be used to refer to the position of the object passed into the str.format() method.\nprint('{0} and {1}'.format('spam', 'eggs'))","metadata":{"id":"tbZG23SufsPA"},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9c18cf","input":"# imports\nimport random\n\nkarate_moves = {\n'Shezentai':'Natural Stance',\n'Choku-Zuki': 'Straight Punch',\n'Oi-Zuki': 'Front Lunge Punch',\n'Gyaku-Zuki': 'Reverse Punch',\n'Gedan Barai': 'Down Block',\n'Age-Uke': 'Rising Block'\n}\nkarate = list(karate_moves.keys())\n\nplay_again = True\nkeys = True\nkey_number = 0\n\n#Set variable for correct guesses\ncorrect_guesses = 0\n#Create a loop that iterates through the list of keys\n\nwhile play_again==True:\n    while keys == True:\n        #inside loop: print the word for the user to guess the description of and get the user's guess for it's description.\n        random_key = (random.choice(karate))\n        print(random_key)\n        guess = input(\"what is this move?\")\n        print(random_key)\n        #print the actual description of the word.\n        answer = karate_moves[random_key]\n\n        #if the user is correct, let them know and add 1 point to their correct guesses.\n        if guess == answer:\n            print(\"good job :D\")\n            correct_guesses += 1\n\n        #otherwise, let the user know they are wrong and don't add any points to their correct guesses\n        else:\n            print(\"that was wrong D:\")\n\n        #after each round print a line separator by uncommenting the following line\n        print('_'*25)\n        key_number += 1\n        if key_number == 6:\n            keys = False\n\n    # tell the user how many they had correct out of total\n    print(\"you got a score of \", correct_guesses)\n\n    again = input(\"do you want to play again? y/n\")\n    if again == \"y\":\n        play_again = True\n    elif again == \"n\":\n        play_again = False\n        print(\"Thanks for playing!\")\n    else:\n        print(\"that was not an option\")\nprint(\"Here is your score:\",correct_guesses)","metadata":{"cocalc":{"outputs":{"1":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"11":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"3":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"5":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"7":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"9":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""}}},"id":"LAIfkxd4VF80"},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b0fe1c","input":"","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bde8ae","input":"# you can use these keys to access the dictionary\nfor i in animals:\n  print(i + \": \", my_dictionary[i])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iWans4X-Y9qL","outputId":"ecf572ad-6727-4b73-8495-e5065acac24b"},"output":{"0":{"name":"stdout","output_type":"stream","text":"dog:  a domesticated carnivorous mammal that typically has a long snout\ncat:  a small domesticated carnivorous mammal with soft fur\nbunny:  a rabbit, especially a young one.\ntimberwolves:  wolves of a large variety found mainly in northern North America, with gray brindled fur.\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c4a922","input":"","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"8441c7","input":"import random\nkarate_moves = {\n'Shezentai':'Natural Stance',\n'Choku-Zuki': 'Straight Punch',\n'Oi-Zuki': 'Front Lunge Punch',\n'Gyaku-Zuki': 'Reverse Punch',\n'Gedan Barai': 'Down Block',\n'Age-Uke': 'Rising Block'\n}\nkarate = list(karate_moves.keys())\n# shuffle your deck of flashcards (list of keys) and print the new order!\n\nprint(random.choice(karate))","metadata":{"id":"w-IuZlrVVF8x"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Choku-Zuki\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"6d3d3b","input":"'''\nyour code here: experiment with string formatting\n'''\nkarate_move = \"Natural Stance\"\nkarate_name = \"Shezentai\"\nprint(karate_move,\"is called\",karate_name)","metadata":{"id":"cVE5APVdfttS"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Natural Stance is called Shezentai\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"389377","input":"dict = {\"hola\": \"hello\",\n        \"adios\": \"bye\",\n        \"gracias\": \"thanks\",\n        \"por favor\": \"please\"\n       }\nspanish = list(dict.keys())\nfor i in spanish:\n    print(i + \":\", dict[i])","metadata":{"id":"Dj_Cw7cefe-H"},"output":{"0":{"name":"stdout","output_type":"stream","text":"hola: hello\nadios: bye\ngracias: thanks\npor favor: please\n"}},"pos":9,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"c196ca","input":"print(karate_moves[random_key])","output":{"0":{"name":"stdout","output_type":"stream","text":"Reverse Punch\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"24876d","input":"# imports\nimport random\n\nkarate_moves = {\n'Shezentai':'Natural Stance',\n'Choku-Zuki': 'Straight Punch',\n'Oi-Zuki': 'Front Lunge Punch',\n'Gyaku-Zuki': 'Reverse Punch',\n'Gedan Barai': 'Down Block',\n'Age-Uke': 'Rising Block'\n}\nkarate = list(karate_moves.keys())\n\nplay_again = True\nkeys = True\nkey_number = 0\n\n#Set variable for correct guesses\ncorrect_guesses = 0\n#Create a loop that iterates through the list of keys\n\nwhile play_again==True:\n    while keys == True:\n        #inside loop: print the word for the user to guess the description of and get the user's guess for it's description.\n        random_key = (random.choice(karate))\n        print(random_key)\n        guess = input(\"what is this move?\")\n        print(random_key)\n        #print the actual description of the word.\n        answer = karate_moves[random_key]\n\n        #if the user is correct, let them know and add 1 point to their correct guesses.\n        if guess == answer:\n            print(\"good job :D\")\n            correct_guesses += 1\n\n        #otherwise, let the user know they are wrong and don't add any points to their correct guesses\n        else:\n            print(\"that was wrong D:\")\n\n        #after each round print a line separator by uncommenting the following line\n        print('_'*25)\n        key_number += 1\n        if key_number == 6:\n            keys = False\n\n    # tell the user how many they had correct out of total\n    print(\"you got a score of \", correct_guesses)\n\n    again = input(\"do you want to play again? y/n\")\n    if again == \"y\":\n        play_again = True\n    elif again == \"n\":\n        play_again = False\n        print(\"Thanks for playing!\")\n    else:\n        print(\"that was not an option\")\nprint(\"Here is your score:\",correct_guesses)\n","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Play game? ('y' to continue) "},"output_type":"stream","value":""},"1":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Natural Stance"},"10":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"d"},"11":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Rising Block"},"12":{"name":"input","opts":{"password":false,"prompt":"do you want to play again? y/n"},"output_type":"stream"},"14":{"name":"input","opts":{"password":false,"prompt":"Play again? ('y' to continue) "},"output_type":"stream","value":"n"},"2":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"d"},"3":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Down Block"},"4":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"a"},"5":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Down Block"},"6":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream"},"8":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"a"},"9":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Front Lunge Punch"}}},"id":"unJkdlnQVF81"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Play game? ('y' to continue) "},"output_type":"stream","value":""},"1":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Natural Stance"},"10":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"d"},"11":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Rising Block"},"12":{"name":"input","opts":{"password":false,"prompt":"do you want to play again? y/n"},"output_type":"stream"},"13":{"name":"stdout","output_type":"stream","text":"Age-Uke\ngood job :D\n_________________________\nyou got a score of  5\n","value":"n"},"14":{"name":"input","opts":{"password":false,"prompt":"Play again? ('y' to continue) "},"output_type":"stream","value":"n"},"2":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"d"},"3":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Down Block"},"4":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"a"},"5":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Down Block"},"6":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream"},"7":{"name":"stdout","output_type":"stream","text":"Gedan Barai\ngood job :D\n_________________________\nGedan Barai\n","value":"Down Block"},"8":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"a"},"9":{"name":"input","opts":{"password":false,"prompt":"what is this move?"},"output_type":"stream","value":"Front Lunge Punch"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"67e30f","input":"# create your flashcards with key: Karate Stance and value: description\nkarate_moves = {\n'Shezentai':'Natural Stance',\n'Choku-Zuki': 'Straight Punch',\n'Oi-Zuki': 'Front Lunge Punch',\n'Gyaku-Zuki': 'Reverse Punch',\n'Gedan Barai': 'Down Block',\n'Age-Uke': 'Rising Block'\n}\n\n# print all the keys in your dictionary\nkarate = list(karate_moves.keys())\nfor i in karate:\n    print(i + \":\", karate_moves[i])\n\n#put all of the keys into a list so you have a \"deck\" of flashcards.\nkarate = list(karate_moves.keys())\nprint(karate)","metadata":{"id":"hTUm1rPfVF8t"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Shezentai: Natural Stance\nChoku-Zuki: Straight Punch\nOi-Zuki: Front Lunge Punch\nGyaku-Zuki: Reverse Punch\nGedan Barai: Down Block\nAge-Uke: Rising Block\n['Shezentai', 'Choku-Zuki', 'Oi-Zuki', 'Gyaku-Zuki', 'Gedan Barai', 'Age-Uke']\n"}},"pos":17,"scrolled":true,"type":"cell"}
{"cell_type":"markdown","id":"07a45a","input":"## The Stances!\n\nHere are the stances:\n\n* Shezentai: Natural Stance\n* Choku-Zuki: Straight Punch\n* Oi-Zuki: Front Lunge Punch\n* Gyaku-Zuki: Reverse Punch\n* Gedan Barai: Down Block\n* Age-Uke: Rising Block\n\nIf you're curious here are some photos of the stances. \n<br>\n<br>\n\n<center />\n<img src=\"https://globalmartialarts.university/wp-content/uploads/2021/01/Shotokan-Beginners-Guide-Infographic-2.jpg\" width=560 height=660 />\n\n","metadata":{"id":"cuw7LZy3VF8q"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"31456e","input":"## Task 4: Put everything together. \n\nCreate an outer loop to ask the user if they want to play the game. If the answer is yes, keep running the program. Keep doing this until they enter something other than yes. \n\nConsolidate all of your other code inside of this loop!","metadata":{"id":"mYVCZ2RKVF80"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"6ad1fd","input":"## Task 3: Set up the game\n\nNow here is where we set up the game!\n\n* Create a variable to keep track of how many guesses user has correct\n* Create a loop that:\n\n> 1. Goes through each word in the list of keys and print this word for the user to guess.\n\n2. Asks the user to `input` their answer (you might have to look up how to get input from a user in python).\n3. Checks whether their answer is right, and adds 1 to the variable for correct guesses \n4. Goes to the next word and repeats steps 1-3.\n\n* After the loop, print how many answers the users got correct and how many they got wrong.\n\n<br>\n\nNote: For repetitive tasks in python, we usually use a `while` or a `for` loop. `While` loops continue executing code in a loop until a certain condition is met, and `for` loops typically are used for iterating across a piece of data. \n\n> DISCUSS: Discuss with your team and instructor which type of loop would be better for this case.\n\n","metadata":{"id":"EL8bZ5XLVF8z"},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"8ec35c","input":"## Some python help\n\nHere is some python code that might help you on your journey! Mainly you should have a good idea of how dictionaries function, since they work pretty similar to flashcards.","metadata":{"id":"RHa0Vb_rXjQr"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"a3a8fc","input":"### Dictionaries Review","metadata":{"id":"yr1mQTCVfmhM"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"b1cbbc","input":"## Task 2: Shuffle the list \n\nAt this point we have a \"deck\" of flashcards (a list of key values for our dictionary). Now you should do some research on how we can `shuffle()` this deck. \n\nWe recommend checking out python's [`random` library](https://docs.python.org/3/library/random.html) to see how to shuffle a list! You also could google \"how to shuffle a list python\".\n\n","metadata":{"id":"acolMI3gVF8w"},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"c25bd4","input":"### String Formatting\n\nChange the code below to see how you can format strings.\n\n","metadata":{"id":"wDh9B_Prfkgr"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"de5293","input":"## Task 1: Create the Flashcards \nIn this section you should create your flashcards using a dictionary that includes each karate stance (key) and its definition (value).\n\nExperiment by using some dictionary functions and save the keys of the dictionary in a list.","metadata":{"id":"HxiI3weuVF8t"},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"f4bf60","input":"# Build a Flashcard Game! \n\nWe will be building a flashcard guessing game where users can guess fighting stances in Karate.\n\n\n\n> Here are the rules:\n* The user will be given the name of a fighting stance and will have to guess its definition/description.\n* Each time the user guesses the description right, the user gets a point.\n* The game will continue until there are no more stance descriptions left to guess.\n* After running out of stances, the user will see how many points they earn and will be asked if they want to play again!\n\nYou can think of this as having the front of the flash card being a fighting stance and the back of the flash card being it's description. Let's get started.\n\n\n\n","metadata":{"id":"jQu4NqtgVF8l"},"pos":0,"type":"cell"}
{"id":0,"time":1656447728656,"type":"user"}
{"last_load":1656519084101,"type":"file"}